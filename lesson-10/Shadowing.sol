// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

/**
 * @title Contract Parent
 * @dev Demonstrates a simple contract with an overridable state variable and function.
 */
contract Parent {
    // Public state variable accessible via getter function automatically generated by Solidity.
    string public name = "Contract Parent";

    /**
     * @notice Retrieves the value of the `name` variable.
     * @return The current value of the `name` variable.
     */
    function getName() public view returns (string memory) {
        return name;
    }
}

/**
 * @dev Starting from Solidity 0.6.0, state variable shadowing is disallowed. Attempting to redeclare
 *      a state variable in a derived contract results in a compilation error.
 */

// Uncommenting this code will cause a compilation error.
// contract Child is Parent{
//     string public name = "Contract Child"; // This would shadow `name` from Contract Parent and is not allowed.
// }

/**
 * @title Contract Child
 * @dev Demonstrates the correct way to override inherited state variables in Solidity.
 */
contract Child is Parent {
    /**
     * @dev Constructor for Contract Child. Overrides the inherited `name` variable
     *      from Contract Parent by directly modifying its value.
     */
    constructor() {
        name = "Contract Child"; // Overrides the `name` state variable from Contract Parent.
    }

    /**
     * @notice Overrides the `getName` function inherited from Contract Parent.
     *         Returns the updated name, "Contract Child".
     * @return The overridden value of the `name` variable.
     */
    // The inherited `getName` function remains unchanged, returning "Contract Child" due to the updated value of `name`.
}
